package com.sample.android;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import com.sample.download.FileUtils;

public class Bayes {
	static List<Double> normalentropy = new ArrayList<Double>();
	static List<Double> virusentropy = new ArrayList<Double>();
	static List<String> feature = new ArrayList<String>();
	static List<String> resultstr = new ArrayList<String>();
	static Map<String, Integer> normalmap = new HashMap<String, Integer>();;
	static Map<String, Integer> virusmap = new HashMap<String, Integer>();;
	public double ratio;

	public boolean GetFeatureInfo(String dexFile, String xmlFile) throws IOException {
		// TODO Auto-generated method stub
		FileUtils fileutils=new FileUtils();
		fileutils.read2SDFromInput(normalmap,virusmap);
		computeentropy(normalmap,virusmap);

		boolean type;
		HashSet<String> testword = new HashSet<String>();
		GetString(dexFile, testword);
		GetPermission(xmlFile, testword);
		type = ComputeBayes(testword);
		return type;
	}

	private static void GetString(String dexFile, HashSet<String> testword) {
		// TODO Auto-generated method stub
		try {
			String[] words = null;
			String[] str1 = null;
			FileInputStream fis = new FileInputStream(dexFile);
			InputStreamReader isr = new InputStreamReader(fis, "GBK");

			BufferedReader br = new BufferedReader(isr);// 文件自己替换.
			String data = "";
			StringBuffer temp = new StringBuffer();
			while ((data = br.readLine()) != null) {
				temp.append(data);
			}
			br.close();	
 
			String strflow=temp.toString();
			if(strflow.contains("<init>"))
			{
				str1 = strflow.split("<init>", 2);
			}			
			String str2 = str1[1];
			words = str2.split("\\x00");
			char c;
			String strtemp = "";
			for (int i = 0; i < words.length; i++) {
				for (int j = 0; j < words[i].length(); j++) {
					c = words[i].charAt(j);

					if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')
							|| c == '/' || c == '_' || c == '.') {
						strtemp += c;
					}
				}
				if (strtemp.length() > 4 ) {
					testword.add(strtemp);
				}
				strtemp = "";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}	
	}

	private static void GetPermission(String xmlFile, HashSet<String> testword){
		// TODO Auto-generated method stub		
		String strtemp = "";
		String str2 = "";
		try {
			FileInputStream fis = new FileInputStream(xmlFile);
			InputStreamReader isr = new InputStreamReader(fis, "GBK");

			BufferedReader br = new BufferedReader(isr);// 文件自己替换.
			String data = "";
			StringBuffer temp = new StringBuffer();
			while ((data = br.readLine()) != null) {
				temp.append(data);
			}
			br.close();	
			String str=temp.toString();
			str2 = str.replaceAll("\\x00", "");
			if (str2.contains("uses-permission")) {
				String[] str3 = str2.split("uses-permission", 2);
				String str4 = str3[1];

				for (int i = 0; i < str4.length(); i++) {
					char c = str4.charAt(i);
					if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')
							|| c == '_' || c == '.') {
						strtemp += c;
					} else {
						if (strtemp.contains("permission")) {
							testword.add(strtemp);
							strtemp = "";
						}
					}
				}
			} 
		}catch (Exception e) {
			e.printStackTrace();
		}	
	}

	private static boolean ComputeBayes(HashSet<String> testword) {
		// TODO Auto-generated method stub
		double percent = 1.0;
		for (String str : testword) {
			int index = feature.indexOf(str);
			if (index > 0) {
				if ((normalentropy.get(index) != 0.0)
						&& (virusentropy.get(index) != 0.0)) {
					percent *= normalentropy.get(index)
							/ virusentropy.get(index);
				}
			}
		}
percent=ratio*percent;
		percent = 1 + percent;
		percent = 1 / percent;
		testword.clear();
		if (percent < 0.4) {	
			return false;			
		} else
			return true;
	}

	public static void computeentropy(Map<String, Integer> normalfeature,
			Map<String, Integer> virusfeature) {
		// TODO Auto-generated method stub
		Integer virustotal = 0;
		Integer normaltotal = 0;
		double temp = 0.0;
		String str = null;
		Set<Entry<String, Integer>> normal = normalfeature.entrySet();
		Iterator<Entry<String, Integer>> iter = normal.iterator();
		Set<Entry<String, Integer>> virus = virusfeature.entrySet();
		Iterator<Entry<String, Integer>> it = virus.iterator();

		while (iter.hasNext()) {
			Entry<String, Integer> entry = (Entry<String, Integer>) iter.next();
			normaltotal += entry.getValue();
		}
		while (it.hasNext()) {
			Entry<String, Integer> entry = (Entry<String, Integer>) it.next();
			virustotal += entry.getValue();
		}
		iter = normal.iterator();
		it = virus.iterator();
		while (iter.hasNext()&&it.hasNext()) {
			Entry<String, Integer> entry1 = (Entry<String, Integer>) iter
					.next();
			Entry<String, Integer> entry2 = (Entry<String, Integer>) it.next();

			temp = (double) entry1.getValue() / normaltotal;
			normalentropy.add(temp);
			temp = (double) entry2.getValue() / virustotal;
			virusentropy.add(temp);
			str = entry1.getKey();
			feature.add(str);
		}
           ratio=(double)entry1.getValue()/entry2.getValue();
		normalfeature.clear();
		virusfeature.clear();
	}
}

